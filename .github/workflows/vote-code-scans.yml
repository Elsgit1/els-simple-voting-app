name: vote-app code analysis and security scan.

on:
  pull_request: 
    branches: ["main"]
    paths:
      - 'vote/**'

  workflow_dispatch:    
env:
  AWS_REGION: us-west-1
  REPOSITORY: vote-app
  REGISTRY: Amazon-ECR

jobs:
    vote-code-scans:
      runs-on: ubuntu-latest
      permissions:
        contents: write
        packages: write
  
      steps:
      - name: Clone repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessary to fetch all tags and history

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Install Dependencies
      - name: Install dependencies
        working-directory: vote
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # # Run Tests
      # - name: Run tests
      #   working-directory: vote
      #   run: |
      #     pip install pytest
      #     pytest --junitxml=test-results.xml

      # # Upload Test Results (optional but recommended)
      # - name: Upload Test Results
      #   if: always()
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: test-results
      #     path: test-results.xml


      # Run Snyk Software Composition Analysis. If fails, drop the action
      - name: Run Snyk Open Source Scan
        working-directory: vote
        run: snyk test --file=requirements.txt --severity-threshold=medium --json > snyk-results.json
        env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Check Snyk Results
        working-directory: vote
        run: |
            vulnerability_count=$(jq '.vulnerabilities | length' snyk-results.json)
            if [ $vulnerability_count -gt 5 ]; then
            echo "SCA scan failed: More than 5 vulnerabilities found"
            exit 1
            fi

  
      # Setup Git
      - name: Setup Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
  
  ################################################################
  ###               DETERMINE NEXT VERSION                     ###
  ###   Used for creating new releases and image tags          ###
  ################################################################
  
      - name: Determine Next Version
        id: next_version
        run: |
          # Fetch all tags
          git fetch --tags
          
          # Get the latest tag, assume semver, and sort.
          LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          
          # If there's no tag yet, start with v1.0.0.
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v1.0.0"
          fi
          
          # Increment the patch version
          NEXT_TAG=$(echo $LATEST_TAG | awk -F. '{print $1"."$2"."$3+1}')
          
          # Output the next version
          echo "::set-output name=tag::$NEXT_TAG"
          echo "Next version: $NEXT_TAG"
  
  ################################################################
  ###                     CREATE RELEASE                       ###
  ###  Creating release with the tag from the previous step    ###
  ################################################################
  
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          tag_name: ${{ steps.next_version.outputs.tag }}
          release_name: vote-app ${{ steps.next_version.outputs.tag }}
          draft: false
          prerelease: false
  
  ###########################################################
  ####      Log into repos and build docker image       #####
  ###########################################################

      # - name: Extract repository name
      #   id: repo-name
      #   run: |
      #     REPO_NAME="${GITHUB_REPOSITORY##*/}"
      #     echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
      #     echo "::set-output name=repo_name::$REPO_NAME"
      
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.REPOSITORY }}
          IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f vote/Dockerfile vote 
          echo "IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
          echo "::set-output name=name::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  
  ##################################################################
  ###  Snyk & SonarCloud image scans | If fails, drop the action ###
  ##################################################################             
                 
      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
           image: ${{ steps.build-image.outputs.name }}
           args: --severity-threshold=high --policy-path=.snyk --file=vote/Dockerfile
        continue-on-error: true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=Elsgit1_els-simple-voting-app
            -Dsonar.organization=elsgit1
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.python.coverage.reportPaths=test-results.xml
            -Dsonar.sources=vote
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#########################################################################################
###    Send notifications to Slack and email if pipeline fails or is cancelled     ######
#########################################################################################

    #   - name: Notify on Failure to Slack
    #     if: failure()
    #     env:
    #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}  # setup slack webhook url in github secrets
    #     run: |
    #         curl -X POST -H 'Content-type: application/json' --data '{"text":"Pipeline failed: ${{ github.workflow }} - ${{ github.run_id }}"}' $SLACK_WEBHOOK_URL

    #   - name: Notify on Failure via Email
    #     if: failure()
    #     uses: dawidd6/action-send-mail@v3
    #     with:
    #         server_address: smtp.gmail.com
    #         server_port: 465
    #         username: ${{ secrets.EMAIL_USERNAME }}
    #         password: ${{ secrets.EMAIL_PASSWORD }}
    #         subject: "Pipeline failed: ${{ github.workflow }}"
    #         body: "Pipeline failed: ${{ github.workflow }} - ${{ github.run_id }}"
    #         to: dev-notifications@gmail.com  # replace with desired email address
    #         from: GitHub Actions